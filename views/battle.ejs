<%- include('./common/header') %>

<%/* jsファイル読み込み */%>
<script type="text/javascript" src="javascripts/common.js"></script>
<script type="text/javascript" src="javascripts/game.js"></script>
<script type="text/javascript" src="javascripts/piece.js"></script>
<script type="text/javascript" src="javascripts/board.js"></script>
<script type="text/javascript" src="javascripts/komaAction.js"></script>
<script src='/socket.io/socket.io.js'></script>

<%/* テンプレートファイル読み込み */%>
<%/*- include('./door.ejs') */%>
<%- include('./board_battle.ejs')%>

<script>
  // クリックorタップできる方を判定
  let clickEventType=((window.ontouchstart!==null) ? 'click' : 'touchstart');

  // socket通信開始
  let socket = io('/battle');

  // 対局情報を詰めておく
  let game      = new Game();
  game.ownId    = <%=own.id%>;
  game.roomId   = <%=matchingInfo.roomId%>;
  game.isSente  = <%=matchingInfo.sente.id%>;
  game.isGote   = <%=matchingInfo.gote.id%>;

  // 初期盤面配置
  let board = <%- JSON.stringify(boardInfo) %>;

  // 手番情報
  let teban = game.ownId == game.isSente ? true : false;

  $(document).ready(function(){

    // 部屋に入室
    socket.emit("joinBattle", game.roomId);

    // 駒画像初期表示
    dispInitKomaImg();

    // 盤面更新
    socket.on("updateBoard", function (data) {

      // 盤面クラスを生成
      board = new Board(data.board,true);

      // 相手視点のみ移動範囲を生成
      if(!data.isOwn) {
        board.extractLegalArea(board.showMoveArea(board));
      }

      let komaBase = game.Koma_Base[data.koma];

      // 画面更新
      updateKomaImg(komaBase,data.moveFrom,data.moveTo,data.isOwn);

      // 駒入れ替えがあった場合
      if(data.isHold){
        setHand(board);
      }

      // 手番更新
      teban = data.teban;
    
    });

    // 現在の状態を管理する変数 (1 == 暗転状態)
    let status = 0;

    // 選択中の駒情報
    let komaInfo = null;

    // 盤面クリックで発生するイベント
    $(document).on(clickEventType, ".square", function(){

      if(teban) {
        let toPos = parseInt($(this).attr("id")); // 選択マスのIDを保管

        // 駒を未選択の状態
        if(status == 0) {

          // 自駒をタップした場合
          if($(this).hasClass("isOwn")) {
            komaInfo = board[toPos];                // 駒情報を保管
            $(this).addClass("onTap");              // 選択中フラグを付与
            addBlackOut_SelectArea(komaInfo,toPos); // blackOut、isSelectArea付与
            status = 1;                             // ステータス更新
          }

        // 駒を選択済の状態
        }else if(status == 1) {

          // 移動可能マスの場合 (駒移動処理)
          if($(this).hasClass("selectArea")) {

            // 駒成の判定
            if(!komaInfo.isOu && !komaInfo.isKi && !komaInfo.isEvolve && !komaInfo.isHold){
              if((komaInfo.isSente && game.SenteArea.includes(toPos)) || (komaInfo.isSente && game.SenteArea.includes(komaInfo.position)) || (!komaInfo.isSente && game.GoteArea.includes(toPos)) || (!komaInfo.isSente && game.GoteArea.includes(komaInfo.position))){
                if(!confirm('成りますか？')){
                }else{
                    // OKの時の処理
                    komaInfo.isEvolve = true;
                }
              }
            }

            // 単純化した配列に変換
            board = convertBoard(board);

            let socketInfo = {
              roomId:game.roomId,
              board:board,
              fromPos:komaInfo.position,
              toPos:toPos,
              isEvolve:komaInfo.isEvolve
            }

            // サーバーに送信
            socket.emit("moveKoma", socketInfo);

            removeOnTap_SelectArea_BlackOut();     // onTap、selectArea、blackOutを全削除
            status = 0;                            // ステータス更新
          
          // 移動可能マス以外の場合
          } else {

            removeOnTap_SelectArea_BlackOut();     // onTap、selectArea、blackOutを全削除
            status = 0;                            // ステータス更新

            // 選択中の駒と別の駒をタップした場合
            if($(this).hasClass("isOwn") && toPos != komaInfo.position) {
              komaInfo = board[toPos];                // 駒情報を保管
              $(this).addClass("onTap");              // 選択中フラグを付与
              addBlackOut_SelectArea(komaInfo,toPos); // blackOut、isSelectArea付与
              status = 1;                             // ステータス更新
            }
          }
        }
      }
    });

  });
</script>


<%- include('./common/footer') %>